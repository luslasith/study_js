/*
    3이나 5.5, 100,000,000처럼 컴퓨터가 정확히 나타낼 수 있는 숫자도 있지만,
    근사치로만 표현할 수 있는 숫자도 많다.

    ex) π는 절대 컴퓨터로 표현할 수 없다.
    원주율을 구성하는 숫자는 무한하고 반복되지 않기 때문.
    10/3같은 숫자는 특별한 테크닉을 써서 나타낼 수 있지만, 소수점 아래 자리가 무한히 반복되므로
    일시적으로 근사치로만 나타냄.

    JS도 다른 프로그래밍 언어와 마찬가지로 실제 숫자의 근사치를 저장할 때 IEEE-764 배정도 부동소수점 숫자 형식을 사용.
    앞으로는 이 형식을 '더블'이라고 할 것이다. 그리고 이걸 당장 이해할 필요는 없음. 필요하면 찾아보도록.

    더블 형식의 근사치 결과는 종종 사람들을 당황시킨다.
    JS에서 0.1 + 0.2는 0.3000...004를 반환한다.
    버그가 있어 그런 것은 아니고 무한한 값을 유한한 메모리 안에서 표시하려나 나타나는 현상.


    JS에는 숫자형 데이터 타입이 하나뿐인데, 흔치 않은 것이다.
    (언젠가는 바뀔 수도 있음. 세분화된 정수타입은 꼭 필요하기때문.)
    장점이라면 단순한 것.
    단점이라면 JS를 고성능 정수연산이나 정밀한 소수점 연산이 필요한 앱에선 쓸 수 없음.

    JS는 10진수, 2진수, 8진수, 16진수의 네 가지 숫자형 리터럴을 인식한다.
    10진 리터럴에는 소수점 없는 정수, 소수점 있는 10진수(12.34 등), 과학에서
    사용하는 지수표기법을 사용할 수 있다.

    그 외에도 무한대, 음의 무한대, '숫자가 아님'을 나타내는 특별한 값들이 있다.
    엄밀히 말해 이들은 숫자형 리터럴은 아니지만, 숫자형 값이므로 참고하도록. */

    let count = 10;         // 숫자 리터럴
    const blue = 0x000ff;   // 16진수. 16진수 ff는 10진수 255와 같다.
    const umask = 0o0022;   // 8진수. 8진수 22는 10진수 18과 같다.
    const roomTemp = 21.5;  // 10진수
    const c = 3.0e6;        // 지수 (3.0 x 10^6 = 3,000,000)
    const e = -1.6e-19;     // 지수 (-1.6 x 10^-19 = 0.0000...016)
    const inf = Infinity;
    const ninf = -Infinity;
    const nan = NaN;        // "숫자가 아님"

    /** 
        무한대와 NaN은 현실세계에서 숫자가 아닐 수 있지만 JS에서는 숫자다.
        엄밀히 말하면 일종의 플레이스 홀더이다. (플레이스 홀더? > 값을 인지시켜주는 일종의 기호)
        또한 숫자에 대응하는 Number 객체에는 중요한 숫자형 값에 해당하는 
        유용한 프로퍼티가 있다. (프로퍼티? > 어떠한 값을 나타냄. 그런데 이 값이 다른 값과 연관이 있을 때 property라고 함.
            ex_ const str = '문자수';
            console.log(str.length);
            출력 값: 3
            이런게 프로퍼티임.
            더 깊게 파보자면 인스턴스 프로퍼티, 정적 프로퍼티가 있는데 이건 나중에 따로 알아보기.   ) */

        const small = Number.EPSILON;           // 1에 더했을 때 1과 구분되는 결과를 만들 수 있는 가장 작은 값. 근사치는 2.2e-16
        const bigInt = Number.MAX_SAFE_INTEGER; // 표현할 수 있는 가장 큰 정수
        const max = Number.MAX_VALUE;           // 표현할 수 있는 가장 큰 숫자
        const minInt = Number.MIN_SAFE_INTEGER; // 표현할 수 있는 가장 작는 정수
        const min = Number.MIN_VALUE;           // 표현할 수 있는 가장 작은 수
        const nInf = Number.NEGATIVE_INFINITY;  // - Infinity
        const nan = Number.NaN;                 // NaN
        const inf = Number.POSITIVE_INFINITY;   // Infinity

        // nan과 inf가 에러표시나는 이유는 위 예시에서 이미 사용했기 때문.
