//                  Number, String, Boolean 객체

/*
    이 장 초반에서 숫자와 문자열, 불리언에는 각각 대응하는 객체타입 세 가지가 있다했다.
    이들 객체에는 두 가지 목적이 있다.
    하나는 Number.INFINITY 같은 특별한 값을 지정하는 것이고, 
    다른 하나는 함수 형태로 기능을 제공하는 것이다.
    다음을 보자         */

    const s = 'hello';
    s.toUpperCase();                // 'hello'

    
/*
    이 예제의 s는 마치 객체처럼, 즉 함수 프로퍼티를 가진 것처럼 보인다.
    하지만 우리는 s가 분명 원시 문자열 타입임을 알고있다. 어떻게 된걸까?
    JS는 일시적인 String 객체를 만든다.
    이 임시 객체에 toUpperCase 함수가 들어있다.
    JS는 함수를 호출하는 즉시 임시 객체를 파괴한다.
    객체가 임시로 만들어진다는 것은 다음과 같이 문자열에 프로퍼티를
    할당해보면 알 수 있다.     */

    const d = 'hello';
    d.rating = 3;                   // 에러가 없다. 성공한 것일까?
    d.rating;                       // undefined


/*
    이 예제는 마치 문자열 d에 프로퍼티를 할당하는 것처럼 보인다.
    사실은 일시적인 String 객체에 프로퍼티를 할당한 것.
    임시 객체는 즉시 파괴되므로 d.rating은 undefined이다.

    이런 동작은 전혀 드러나지 않고 사실 생각할 필요도 거의 없지만
    JS가 이면에서 무슨일을 하는지 알아 두면 도움이 될 수 있다.   */